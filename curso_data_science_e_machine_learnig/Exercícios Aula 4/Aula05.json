{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"colab":{"name":"Aula05","provenance":[],"collapsed_sections":[],"toc_visible":true}},"cells":[{"cell_type":"markdown","metadata":{"id":"sMJwwDFRv82t"},"source":["# Regressor de preços de casas\r\n","Nesse exercício, aplicaremos modelos de regressão na predição de preços de casas na Califórnia."]},{"cell_type":"markdown","metadata":{"id":"swRxhNZ4wVLI"},"source":["Primeiramente, execute a célula abaixo para ler os dados:"]},{"cell_type":"code","metadata":{"id":"vB_CPWkbqUm7","colab":{"base_uri":"https://localhost:8080/","height":220},"executionInfo":{"status":"ok","timestamp":1615421691450,"user_tz":180,"elapsed":1053,"user":{"displayName":"Joao Marcos Cardoso da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggq_6wtrWR-WR_D-PJb48mEwuj8S_JetpyrilqY=s64","userId":"18260256331622240062"}},"outputId":"7758689a-62c6-4e51-9a45-1b1fd6df50ab"},"source":["from sklearn.dummy import DummyRegressor\r\n","import pandas as pd\r\n","import numpy as np\r\n","\r\n","df = pd.read_csv('california_housing_train.csv')\r\n","df_test = pd.read_csv('california_housing_test.csv')\r\n","\r\n","X = df.drop(['median_house_value'],1)\r\n","y = df['median_house_value']\r\n","X_test = df_test.drop(['median_house_value'],1)\r\n","y_test = df_test['median_house_value']\r\n","\r\n","df.head()"],"execution_count":68,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>longitude</th>\n","      <th>latitude</th>\n","      <th>housing_median_age</th>\n","      <th>total_rooms</th>\n","      <th>total_bedrooms</th>\n","      <th>population</th>\n","      <th>households</th>\n","      <th>median_income</th>\n","      <th>median_house_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-114.31</td>\n","      <td>34.19</td>\n","      <td>15.0</td>\n","      <td>5612.0</td>\n","      <td>1283.0</td>\n","      <td>1015.0</td>\n","      <td>472.0</td>\n","      <td>1.4936</td>\n","      <td>66900.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-114.47</td>\n","      <td>34.40</td>\n","      <td>19.0</td>\n","      <td>7650.0</td>\n","      <td>1901.0</td>\n","      <td>1129.0</td>\n","      <td>463.0</td>\n","      <td>1.8200</td>\n","      <td>80100.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-114.56</td>\n","      <td>33.69</td>\n","      <td>17.0</td>\n","      <td>720.0</td>\n","      <td>174.0</td>\n","      <td>333.0</td>\n","      <td>117.0</td>\n","      <td>1.6509</td>\n","      <td>85700.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-114.57</td>\n","      <td>33.64</td>\n","      <td>14.0</td>\n","      <td>1501.0</td>\n","      <td>337.0</td>\n","      <td>515.0</td>\n","      <td>226.0</td>\n","      <td>3.1917</td>\n","      <td>73400.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-114.57</td>\n","      <td>33.57</td>\n","      <td>20.0</td>\n","      <td>1454.0</td>\n","      <td>326.0</td>\n","      <td>624.0</td>\n","      <td>262.0</td>\n","      <td>1.9250</td>\n","      <td>65500.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   longitude  latitude  ...  median_income  median_house_value\n","0    -114.31     34.19  ...         1.4936             66900.0\n","1    -114.47     34.40  ...         1.8200             80100.0\n","2    -114.56     33.69  ...         1.6509             85700.0\n","3    -114.57     33.64  ...         3.1917             73400.0\n","4    -114.57     33.57  ...         1.9250             65500.0\n","\n","[5 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":68}]},{"cell_type":"markdown","metadata":{"id":"lZUOuNrGw0yH"},"source":["# 1. Separação do conjunto de validação\r\n","\r\n","Os dados já vieram separados em conjuntos de treino e teste, porém nós precisamos criar um terceiro conjunto de validação, para podermos avaliar diversos modelos sem ocorrer overfit nos dados de teste. \r\n","\r\n","Assim, separe o conjunto principal em um conjunto de treino (80% dos dados) e um de validação (20% dos dados)."]},{"cell_type":"code","metadata":{"id":"uE7sNOq-xbxT","executionInfo":{"status":"ok","timestamp":1615421659903,"user_tz":180,"elapsed":1069,"user":{"displayName":"Joao Marcos Cardoso da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggq_6wtrWR-WR_D-PJb48mEwuj8S_JetpyrilqY=s64","userId":"18260256331622240062"}}},"source":["X_train, X_val, y_train, y_val = None, None, None, None\r\n","\r\n","######################################################################################\r\n","# 1. Separe as variáveis X e y em dados de treino e validação, armazenando os resultados nas variáveis acima\r\n","\r\n","from sklearn.model_selection import train_test_split\r\n","X_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2)\r\n","######################################################################################\r\n","\r\n","\r\n","### Verificação de erros ###\r\n","assert X_train.shape == (13600, 8) and X_val.shape == (3400, 8) and y_train.shape == (13600,) and y_val.shape == (3400,), 'Erro na separação dos conjuntos'"],"execution_count":58,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"e6vzCoj0zH14"},"source":["# 2. Preprocessamento dos dados \r\n","\r\n","Antes de passar os dados para o modelo, é necessário fazer com que eles fiquem aproximadamente na mesma escala. Para isso, vamos considerar duas possibilidades: escalonamento para o intervalo [0,1] e normalização para média 0 e desvio padrão 1."]},{"cell_type":"code","metadata":{"id":"JTgc5kAlzMI1","executionInfo":{"status":"ok","timestamp":1615421660347,"user_tz":180,"elapsed":1240,"user":{"displayName":"Joao Marcos Cardoso da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggq_6wtrWR-WR_D-PJb48mEwuj8S_JetpyrilqY=s64","userId":"18260256331622240062"}}},"source":["def escalonar(data):\r\n","\r\n","    ######################################################################################\r\n","    # 2. Transforme os dados na variável data para que cada coluna tenha um mínimo de 0 e um máximo de 1\r\n","    # Obs: a variável data pode ser um DataFrame inteiro ou uma coluna\r\n","    # O objeto MinMaxScaler da sklearn pode ser útil\r\n","    from sklearn.preprocessing import MinMaxScaler, StandardScaler\r\n","\r\n","    return MinMaxScaler().fit_transform(data)\r\n","\r\n","    ######################################################################################\r\n","\r\n","\r\n","### Verificação de erros ###\r\n","assert escalonar(X_train).shape == X_train.shape, 'Os dados retornados devem ter o mesmo formato dos originais'\r\n","assert np.all(np.abs(np.max(escalonar(X_test)) - 1) < 1e-3) and np.all(np.abs(np.min(escalonar(X_test))) < 1e-3), 'Os dados retornados devem ter um mínimo de 0 e um máximo de 1'"],"execution_count":59,"outputs":[]},{"cell_type":"code","metadata":{"id":"YHvDGCx4qZBh","executionInfo":{"status":"ok","timestamp":1615421660349,"user_tz":180,"elapsed":1123,"user":{"displayName":"Joao Marcos Cardoso da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggq_6wtrWR-WR_D-PJb48mEwuj8S_JetpyrilqY=s64","userId":"18260256331622240062"}}},"source":["def padronizar(data):\r\n","\r\n","    ######################################################################################\r\n","    # 3. Transforme os dados na variável data para que cada coluna tenha uma média de 0 e um desvio padrão de 1\r\n","    # Obs: a variável data pode ser um DataFrame inteiro ou uma coluna\r\n","    # O objeto StandardScaler da sklearn pode ser útil\r\n","\r\n","    return StandardScaler().fit_transform(data)\r\n","\r\n","\r\n","\r\n","    ######################################################################################\r\n","\r\n","\r\n","### Verificação de erros ###\r\n","assert padronizar(X_test).shape == X_test.shape, 'Os dados retornados devem ter o mesmo formato dos originais'\r\n","assert np.all(np.abs(np.std(padronizar(X_test)) - 1) < 1e-3) and np.all(np.abs(np.mean(padronizar(X_test))) < 1e-3), 'Os dados retornados devem ter uma média de 0 e um desvio padrão de 1'"],"execution_count":60,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9cWnEkf22I6W"},"source":["# 3. Métricas de regressão\r\n","\r\n","Uma das principais métricas usadas para regressão é o Erro Quadrático Médio (MSE), que segue a seguinte equação:\r\n","\r\n","$\\text{MSE} = \\frac{1}{n}\\sum (Y_{\\text{pred}} - Y_{\\text{true}})^2$\r\n","\r\n","\r\n","Para facilitar a interpretação desse valor, podemos usar a medida R2, que é um valor normalmente entre 0 e 1. Ele é calculado segundo a seguinte equação:\r\n","\r\n","$R^2 = 1 - \\frac{\\text{MSE}}{\\text{Var}[Y_{\\text{true}}]}$\r\n","\r\n","Assim, implemente as funções para calcular as quantidades acima:\r\n","\r\n"]},{"cell_type":"code","metadata":{"id":"HQPzUAgn2k8B","executionInfo":{"status":"ok","timestamp":1615421660350,"user_tz":180,"elapsed":868,"user":{"displayName":"Joao Marcos Cardoso da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggq_6wtrWR-WR_D-PJb48mEwuj8S_JetpyrilqY=s64","userId":"18260256331622240062"}}},"source":["def MSE(y_true, y_pred):\r\n","\r\n","    ######################################################################################\r\n","    # 4. Implemente uma função que retorne o erro quadrádico médio\r\n","    # y_true: valores verdadeiros da variável\r\n","    # y_pred: valores preditos pelo modelo\r\n","    \r\n","\r\n","    return np.mean((y_true - y_pred)**2)\r\n","    ######################################################################################\r\n","\r\n","### Verificação de erros ###\r\n","assert np.abs(MSE(y_test, np.zeros_like(y_test)) - np.mean(y_test**2)) < 1e-3, 'Erro na função MSE'\r\n","assert np.abs(MSE(y_test, np.ones_like(y_test)*np.mean(y_test)) - np.var(y_test)) < 1e-3, 'Erro na função MSE'"],"execution_count":61,"outputs":[]},{"cell_type":"code","metadata":{"id":"Uegc9TSs7J2v","executionInfo":{"status":"ok","timestamp":1615421660810,"user_tz":180,"elapsed":1195,"user":{"displayName":"Joao Marcos Cardoso da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggq_6wtrWR-WR_D-PJb48mEwuj8S_JetpyrilqY=s64","userId":"18260256331622240062"}}},"source":["def R2(y_true, y_pred):\r\n","    \r\n","    ######################################################################################\r\n","    # 5. Implemente uma função que retorne a medida R2 (pode ser útil reutilizar a função acima)\r\n","    # y_true: valores verdadeiros da variável\r\n","    # y_pred: valores preditos pelo modelo\r\n","    \r\n","    return 1 - (MSE(y_true, y_pred) / np.var(y_true))\r\n","    ######################################################################################\r\n","\r\n","### Verificação de erros ###\r\n","assert np.abs(R2(y_test, np.zeros_like(y_test)) + np.mean(y_test)**2 / np.var(y_test)) < 1e-3, 'Erro na função R2'\r\n","assert np.abs(R2(y_test, np.mean(y_test))) < 1e-3, 'Erro na função R2'"],"execution_count":62,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ur9ZnKPC97y6"},"source":["# 4. Avaliando o modelo KNN\r\n","\r\n","Vamos avaliar a performance do modelo KNN para essa tarefa de regressão, com diferentes tipos de preprocessamento (dados originais, escalonados ou padronizados).\r\n","\r\n","Para isso, implemente a função para realizar as predições com um modelo:"]},{"cell_type":"code","metadata":{"id":"CWdsXdBq7fXb","executionInfo":{"status":"ok","timestamp":1615421661199,"user_tz":180,"elapsed":924,"user":{"displayName":"Joao Marcos Cardoso da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggq_6wtrWR-WR_D-PJb48mEwuj8S_JetpyrilqY=s64","userId":"18260256331622240062"}}},"source":["def predict(model, X_train, y_train, X_val):\r\n","    ######################################################################################\r\n","    # 6. Treine o modelo nos dados de treino e retorne as predições na validação\r\n","    # A variável model é um modelo da biblioteca sklearn, então a função model.fit pode ser usada\r\n","    \r\n","    model = model.fit(X_train, y_train)\r\n","    y_pred = model.predict(X_val)\r\n","    return y_pred\r\n","\r\n","    ######################################################################################\r\n","\r\n","### Verificação de erros ###\r\n","assert np.all(predict(DummyRegressor(), X_train, y_train, X_val) == y_train.mean()), 'Erro na função predict'"],"execution_count":63,"outputs":[]},{"cell_type":"code","metadata":{"id":"XyrMRdJesoLW","executionInfo":{"status":"ok","timestamp":1615421661583,"user_tz":180,"elapsed":967,"user":{"displayName":"Joao Marcos Cardoso da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggq_6wtrWR-WR_D-PJb48mEwuj8S_JetpyrilqY=s64","userId":"18260256331622240062"}}},"source":["def R2_model(model, X_train, y_train, X_val, y_val):\r\n","\r\n","    ######################################################################################\r\n","    # 7. Retorne a medida R2 do modelo treinado (pode ser útil reutilizar a função anterior)\r\n","    \r\n","    return R2(y_val, predict(model, X_train, y_train, X_val))\r\n","    ######################################################################################\r\n","\r\n","### Verificação de erros ###\r\n","assert np.abs(R2_model(DummyRegressor(), X_train, y_train, X_val, y_val)) < 1e-3, 'Erro na função R2_model'"],"execution_count":64,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0UOJEJAkBwow"},"source":["Em seguida, vamos avaliar o modelo KNN nos dados de validação com os diferentes tipos de preprocessamento:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n0WxGCWyAfnX","executionInfo":{"status":"ok","timestamp":1615421663174,"user_tz":180,"elapsed":1291,"user":{"displayName":"Joao Marcos Cardoso da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggq_6wtrWR-WR_D-PJb48mEwuj8S_JetpyrilqY=s64","userId":"18260256331622240062"}},"outputId":"1109c56a-b56a-47e4-997e-4379188bee97"},"source":["from sklearn.neighbors import KNeighborsRegressor\r\n","\r\n","R2_original = None\r\n","R2_escalonado = None\r\n","R2_padronizado = None\r\n","\r\n","######################################################################################\r\n","# 8. Avalie o modelo nos dados de validação em três situações, salvando os resultados nas variáveis acima:\r\n","# 1. Com os dados originais\r\n","# 2. Com os dados escalonados\r\n","# 3. Com os dados padronizados\r\n","#\r\n","# OBS: não utilize os dados de teste nesse passo, apenas os de treino e validação!\r\n","\r\n","model = KNeighborsRegressor()\r\n","\r\n","R2_original = R2_model(model, X_train, y_train, X_val, y_val)\r\n","R2_escalonado = R2_model(model, escalonar(X_train), y_train, escalonar(X_val), y_val)\r\n","R2_padronizado = R2_model(model, padronizar(X_train), y_train, padronizar(X_val), y_val)\r\n","\r\n","######################################################################################\r\n","\r\n","print('R2 sem preprocessamento: %.2f' % R2_original)\r\n","print('R2 com escalonamento entre 0 e 1: %.2f' % R2_escalonado)\r\n","print('R2 com padronização para média 0 e desvio padrão 1: %.2f' % R2_padronizado)"],"execution_count":65,"outputs":[{"output_type":"stream","text":["R2 sem preprocessamento: 0.27\n","R2 com escalonamento entre 0 e 1: 0.64\n","R2 com padronização para média 0 e desvio padrão 1: 0.70\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZULvBWA7kc1B"},"source":["Assim, encontre o melhor valor de K para o modelo KNN usando o preprocessamento selecionado no passo anterior, testando todos os valores de K no intervalo de 1 a 30 no conjunto de validação:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-bVvBKL3kSEo","executionInfo":{"status":"ok","timestamp":1615421669285,"user_tz":180,"elapsed":5988,"user":{"displayName":"Joao Marcos Cardoso da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggq_6wtrWR-WR_D-PJb48mEwuj8S_JetpyrilqY=s64","userId":"18260256331622240062"}},"outputId":"a85269f6-3954-41b4-881e-aec136469d67"},"source":["best_k = None\r\n","best_R2 = None\r\n","\r\n","######################################################################################\r\n","# 9. Encontre o erro do melhor valor de K para o modelo KNN usando o preprocessamento encontrado no passo anterior\r\n","# OBS: não utilize os dados de teste nesse passo, apenas os de treino e validação!\r\n","#\r\n","# Dica: Para criar um modelo KNN com um valor específico de K, use KNeighborsRegressor(n_neighbors = K)\r\n","\r\n","R2s = []\r\n","for k in range(1,31):\r\n","    model = KNeighborsRegressor(n_neighbors = k)\r\n","    R2s.append(R2_model(model, padronizar(X_train), y_train, padronizar(X_val), y_val))\r\n","\r\n","best_k = 1 + np.argmax(R2s)\r\n","best_R2 = np.max(R2s)\r\n","######################################################################################\r\n","\r\n","print('Melhor valor de k encontrado: %d' % best_k)\r\n","print('Melhor erro R2 na validação encontrado: %.2f' % best_R2)"],"execution_count":66,"outputs":[{"output_type":"stream","text":["Melhor valor de k encontrado: 7\n","Melhor erro R2 na validação encontrado: 0.71\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"e_Jokhfcl0TM"},"source":["Finalmente, podemos usar o valor ótimo encontrado para avaliar o modelo nos dados de teste:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"inPGFfaul5Wg","executionInfo":{"status":"ok","timestamp":1615421669290,"user_tz":180,"elapsed":4164,"user":{"displayName":"Joao Marcos Cardoso da Silva","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggq_6wtrWR-WR_D-PJb48mEwuj8S_JetpyrilqY=s64","userId":"18260256331622240062"}},"outputId":"46c7c9b2-2763-4594-94ee-1aabe4a52088"},"source":["test_R2 = None\r\n","\r\n","######################################################################################\r\n","# 10. Encontre o erro do modelo encontrado nos dados de teste\r\n","# Para isso, use o valor de k e o preprocessamento ótimos encontrados\r\n","\r\n","model = KNeighborsRegressor(n_neighbors = best_k)\r\n","test_R2 = R2_model(model, padronizar(X_train), y_train, padronizar(X_test), y_test)\r\n","######################################################################################\r\n","\r\n","print('Erro final encontrado no teste: %.2f' % test_R2)"],"execution_count":67,"outputs":[{"output_type":"stream","text":["Erro final encontrado no teste: 0.69\n"],"name":"stdout"}]}]}