{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Exercise 4.2 - Pandas Stats and Viz II","provenance":[{"file_id":"108IIhrQv2-ffwBY7Yz_WVxJG-BsU4DA4","timestamp":1588135802500}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"HleWR9kG9vCe","colab_type":"text"},"source":["# Data Science for Construction, Architecture and Engineering\n","\n","### Section 4 - Operations - Pandas Statistics and Visualization\n","\n","### Exercise Set 4.2 - Pandas Stats and Viz II\n","\n","This set of exercises is related to the second half of Section 4 videos. Using the same data (ASBRAE Thermal Comfort Database II) and packages (Pandas) as in the videos, we will learn how to find specific values in different scenarios.\n","\n","There is an introduction video available to explain the process of using this exercise video.\n","\n","The lead developer of this exercise is Chun Fu, a Ph.D. student at NUS and a teaching assistant of this course. "]},{"cell_type":"markdown","metadata":{"id":"SgWrI_yaFRLc","colab_type":"text"},"source":["#### Setup the environment\n","\n","Let's set up the environment and read the data first:"]},{"cell_type":"code","metadata":{"id":"3LNZyZpf9Sav","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1593496462531,"user_tz":-480,"elapsed":1264,"user":{"displayName":"Chun Fu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj8WftdTRWLUPM-NWIUfSYFilOVX34Euvk1el6Nfg=s64","userId":"17527192923561102849"}},"outputId":"b7807848-ecd1-4090-f1d8-63aa4442ac7b"},"source":["# Import packages\n","import pandas as pd\n","from google.colab import drive\n","import os\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","%matplotlib inline"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"Bn2W9wfA-WM7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":122},"executionInfo":{"status":"ok","timestamp":1593496491658,"user_tz":-480,"elapsed":29589,"user":{"displayName":"Chun Fu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj8WftdTRWLUPM-NWIUfSYFilOVX34Euvk1el6Nfg=s64","userId":"17527192923561102849"}},"outputId":"760d1658-6389-4f8e-a7c4-3f5417681101"},"source":["# Set path for data source\n","drive.mount('/content/gdrive')\n","os.chdir(\"/content/gdrive/My Drive/EDX Data Science for Construction, Architecture and Engineering/4 - Operations - Statistics and Visualization/\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mK-lFl7l-WTj","colab_type":"code","colab":{}},"source":["# Load thermal comfort database\n","ieq_data = pd.read_csv(\"ashrae_thermal_comfort_database_2.csv\", index_col='Unnamed: 0')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zK4C2bp-AQj4","colab_type":"text"},"source":["## Boxplot Example in Seaborn\n","\n","Before we get into the exercises, let's look at an example of how we can use boxplots to compare distributions between different groups. In the figure below, we have created a visualization that shows the **Air temperature (C)** has significantly different distributions under different **Thermal sensation**.\n","\n","For example, **Air temperature (C)** with the lowest **ThermalSensation_rounded** value (-3.0) has the distribution of lower values (seeing the boxplot body that covers 50% of the data)."]},{"cell_type":"code","metadata":{"id":"tr8uYvMp-d2d","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":406},"executionInfo":{"status":"ok","timestamp":1593496496312,"user_tz":-480,"elapsed":1144,"user":{"displayName":"Chun Fu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj8WftdTRWLUPM-NWIUfSYFilOVX34Euvk1el6Nfg=s64","userId":"17527192923561102849"}},"outputId":"83b0dd47-e724-4a4b-87ba-371d545b85d9"},"source":["# Boxplot for Air temperature (C) under different Thermal sensation\n","fig, ax = plt.subplots()\n","fig.set_size_inches(10,6)\n","sns.boxplot(x=\"ThermalSensation_rounded\", y=\"Air temperature (C)\", data=ieq_data)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f8723ca0be0>"]},"metadata":{"tags":[]},"execution_count":4},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZpVo1sEVCg9k","colab_type":"text"},"source":["## Exercise 04.2.1 -- Which country has the lowest median relative humidity?\n","\n","After the example shown above, you should be more familiar with how to use boxplot in Seaborn package! \n","\n","Now, imagine you are an environmental researcher who mainly studies **humidity conditions** of our surrounding environments, especially focusing on where the **lowest** relative humidity happens.\n","\n","So, in our first exercise, let's begin with considering only one variable (or column) - **Country**. In terms of **median**, find the country with the lowest **Relative humidity (%)**, according to the dataset (for example, **Singapore** could be one of possible answers).\n","\n"," You are encouraged to draw boxplots of **Relative humidity (%)** for each of the different **Country**, just like the example we demonstrated.\n","\n","**Note**: All measurements in `ASHRAE Thermal Comfort Database II` were collected from field experiments research projects, including indoor and outdoor environments, so they might not represent the local climate or general indoor condition."]},{"cell_type":"code","metadata":{"id":"_8Lvgaug1E3N","colab_type":"code","colab":{}},"source":["# Try to use the seaborn example from above. If the x-axis labels are too hard to read, try to adjust the parameters in set_size_inches() or switch X and Y axis\n","# YOUR CODE HERE \n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NuaxoWkB3diM","colab_type":"text"},"source":["## Exercise 04.2.2 - Which country and season has the lowest median relative humidity?\n","\n","In 4.2.1, we got the lowest median relative humidity among different countries. However, the distribution of humidity is also strongly affected by different seasons. Therefore, in this exercise, please consider both **Country** and **Season** at the same time to find the lowest median **Relative humidity (%)**.\n","\n","Find the country and season with the lowest **median** **Relative humidity (%)** (for example, **Singapore-Summer** could be one of possible answers)."]},{"cell_type":"code","metadata":{"id":"O5Y2bHy-3vhi","colab_type":"code","colab":{}},"source":["# If the x-axis labels are too hard to read, try to adjust the parameters in set_size_inches() or switch X and Y axis\n","# YOUR CODE HERE\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XaWJXJE9Lts5","colab_type":"text"},"source":["## Exercise 04.2.3 - Which country, season, and building type, has the lowest median relative humidity? - Advanced\n","\n","Based on the problems above, we can get the minimum relative humidity by taking into account both the **Country** and the **Season**. However, **Building type** is also an important factor influencing the indoor environment, and we should consider this as well. In addition, some subsets in the `ASHRAE Thermal Comfort Database II` have rows with incomplete data that might not give a reliable result, so they should be removed.\n","\n","So, in this exercise, we want to (1) consider three conditions at the same time: **Country**, **Season** and **Building type**, and (2) **remove the subset with less than 100 rows** (e.g., the subset Sweden-Winter-Classroom with only 54 data rows should be removed).\n","\n","Find the **Country**, **Season**, and **Building type** with the lowest `median` **Relative humidity (%)**\n","\n","Please provide the answer in the following format: \"country-season-building type\", with the first letter capitalized, for example, **Singapore-Summer-Office**"]},{"cell_type":"code","metadata":{"id":"beVwzJOwtDkG","colab_type":"code","colab":{}},"source":["# Create a dataframe of counts by using groupby(by=['var1','var2','var3']), and put list of variables as parameter in function\n","# YOUR CODE HERE\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"guxgvgl2AC6X","colab_type":"code","colab":{}},"source":["# Create a dataframe of medians by using groupby(by=listOfVariable), where listOfVariable is a list of variable names\n","# YOUR CODE HERE\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ms-tD-PwXQpw","colab_type":"code","colab":{}},"source":["# Use dataframe of counts as filter (keep subsets with more or equal than 100 data rows) and find the lowest value\n","# YOUR CODE HERE\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aaUhg9VKgobH","colab_type":"text"},"source":["### **Please note that you will need to use the resultant output from Exercise 04.2.3 for the Quiz 4.2.**\n","**(The answer should follow the format:\"country-season-building type\", with the first letter capitalized, for example, Singapore-Summer-Office)**"]},{"cell_type":"code","metadata":{"id":"opWxmVZ3efDK","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}