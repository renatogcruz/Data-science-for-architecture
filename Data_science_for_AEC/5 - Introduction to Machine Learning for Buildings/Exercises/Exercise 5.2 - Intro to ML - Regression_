{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Exercise 5.2 - Intro to ML - Regression ","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"dq3zTkSVGtNt","colab_type":"text"},"source":["# Data Science for Construction, Architecture and Engineering\n","### Week 5 - Introduction to Machine Learning\n","## Exercise Set 5.2 - Introduction to ML - Regression and Classification\n","\n","This exercise is related to the second half of Week 5 videos. Using the same data (Project Building Data Genome) and packages (sklearn, matplotlib) as in the videos, the following tasks about regression.\n","\n","There is an introduction video available to explain the process of using this exercise video.\n","\n","The developer of this exercise is [Mahmoud Abdelrahman](https://www.linkedin.com/in/mahmoudouf/), a Ph.D. student at NUS.\n"]},{"cell_type":"markdown","metadata":{"id":"AhyVEnEh6Q0d","colab_type":"text"},"source":["#### Setup the environment\n","\n","Let's set up the environment first:"]},{"cell_type":"code","metadata":{"id":"EXOrJhIrcSUn","colab_type":"code","colab":{}},"source":["#import packages\n","import pandas as pd\n","import os\n","import matplotlib.pyplot as plt\n","import matplotlib"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"R_Px9CAOmMr9","colab_type":"code","colab":{}},"source":["#import machine learning modules\n","import sklearn\n","from sklearn import metrics\n","from sklearn.neighbors import KNeighborsRegressor\n","\n","from scipy.cluster.vq import kmeans, vq, whiten\n","from scipy.spatial.distance import cdist\n","import numpy as np\n","from datetime import datetime\n","import seaborn as sns\n","\n","\n","#import the classifiaction modules\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix\n","from sklearn.dummy import DummyClassifier\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import classification_report, roc_curve, auc, precision_recall_curve\n","from sklearn.externals import joblib\n","from sklearn.model_selection import RandomizedSearchCV\n","from sklearn.feature_selection import SelectKBest"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BcIDi9ezmPRF","colab_type":"code","colab":{}},"source":["# Mount the drive\n","from google.colab import drive\n","drive.mount('/content/gdrive')\n","# Change directory location (hint: chdir)\n","os.chdir(\"/content/gdrive/My Drive/EDX Data Science for Construction, Architecture and Engineering/3 - Construction - Pandas Fundamentals/\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"uGTWcGW9cTpe","colab_type":"text"},"source":["## Exercise 05.2.1 - Preprocessing data for regression\n","\n","### Preprocessing weather data:\n","In the first part of this exercise, we want you to load the `weather0.csv` file from the Week 3 Building Data Genome data. Then you need to resample the data hourly, and extract only the `'TemperatureC'` as a feature.\n","\n","Feature name | Feature type\n","--- | ---\n","TemperatureC | numerical (float)\n","\n","Next, extract additional features such as hours of the day and day of the week, this features could help enhance a prediction model \n","\n","Feature name | Feature type\n","--- | ---\n","Hour_of_the_day | categorical \n","Day_of_the_week | categorical\n","\n","\n","\n","**Hint:** There are some [outliers](https://en.wikipedia.org/wiki/Outlier) that need to be removed first -- You can boxplot the data to figure out these outliers as follows:\n","\n","`weather_hourly[['TemperatureC']].boxplot()`\n","\n","**Hint:** [Categorical data](https://www.kaggle.com/tags/categorical-data) are observations that fall into discrete categories. For example: days of the week, months of the year, climate seasons, gender and so on. To make use of such data type in Machine Learning, each category should be first [encoded](https://towardsdatascience.com/encoding-categorical-features-21a2651a065c), sometimes refer to `dummify` the variables. \n"]},{"cell_type":"code","metadata":{"id":"pE0g5SJkoRRY","colab_type":"code","colab":{}},"source":["# Load the weather file (parsing the dates) extract the temperature column and check for outliers\n","# YOUR CODE HERE\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"z7-iCmaVjLvX","colab_type":"code","colab":{}},"source":["# Remove temperature ouliers, temperature > -40degC and resample hourly, filling the gaps\n","# YOUR CODE HERE\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RFsv_o7wunt4","colab_type":"code","colab":{}},"source":["# Finally, plot the data\n","# YOUR CODE HERE\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"q5NNDtgUkbln","colab_type":"code","colab":{}},"source":["# Extract hour of the day and day of week for each row (in separate columns) \n","# YOUR CODE HERE\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Is3XE16tzJ35","colab_type":"text"},"source":["**Hint**: The result from above should look like this:\n","\n","| timestamp           |   TemperatureC |   H |   D |\n","|:--------------------|---------------:|----:|----:|\n","| 2015-01-01 00:00:00 |            2.8 |   0 |   3 |\n","| 2015-01-01 01:00:00 |            2.9 |   1 |   3 |\n","| 2015-01-01 02:00:00 |            2.8 |   2 |   3 |\n","| 2015-01-01 03:00:00 |            2.2 |   3 |   3 |\n","| 2015-01-01 04:00:00 |            2.2 |   4 |   3 |\n","\n","\n","Now lets encode the **hour of the day** and **day of the week** columns of this DataFrame in a new DataFrame called `feature_dataset`\n","\n","**Hint**: To dummify (or encode) specific columns you can use `columns=['col1','col2',...]` while using [`get_dummies()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.get_dummies.html)"]},{"cell_type":"code","metadata":{"id":"tldATdjQ8Jo1","colab_type":"code","colab":{}},"source":["# Encode the `hour of the day` and `day of the week` in a new DataFrame called `feature_dataset`\n","# YOUR CODE HERE\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XaCcNHafP8bV","colab_type":"text"},"source":["## Exercise 05.2.2 - Forecasting Energy Consumption\n","\n","Energy forecasting is used for efficient operation and management of building energy as well as cost effective purchase of electricity, amongst other applications. \n","\n","Now let's apply this concept on the `Office_Autumn.csv` file. We will develop a medium-term electrical load forecasting (MTELF) that can accurately forecast next month's energy consumption based on the last three months. \n","\n","First, load the metered data of the building `Office Autumn.csv`. Secondly, write a function `runTheModel` in which the inputs are the features_dataset, the target_dataset, training months, and testing months. The output is a two column dataframe with the `actual` and `predicted` consumption. The `actual` values are the real consumption for the months to be predicted and the `predicted` is the output of the `KneighborRegressor` with default parameters.\n","\n","The months chosen are given as default values for the function parameter.\n","\n","**Hint**: The forecasting model structure will be as follows:\n","\n","\n","Features | Target\n","--- | ---\n","`TemperatureC` (float) <br><br>`hour_of_the_day` (dummy variable) <br><br>`day_of_the_week` (dummy variable)| Energy consumption\n","\n","\n","**Note:** This function will be used in the following exercise.\n"]},{"cell_type":"code","metadata":{"id":"wTYpiSVA7TcB","colab_type":"code","colab":{}},"source":["# Load the `csv` file as `target_dataset` and resample and fill the gaps\n","# YOUR CODE HERE\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JTIuXbgRGkgy","colab_type":"code","colab":{}},"source":["def runTheModel(feature_dataset, target_dataset, train_months=[4,5,6], test_month=[7]):\n","  \"\"\"\n","  @Params:\n","    feature_dataset: is a pandas dataframe that contains all the features from the previous exercise. \n","    target_dataset: is the metered_data dataframe. \n","    train_months: (list) is a list of 3 sorted integers representing the training months.\n","    test_months: (list) is a list of integer representing the test month. \n","  @Return:\n","    This function returns a dataframe of the prediction vs actual result .\n","  \"\"\"\n","  # Use the comments below to help you stage the parts of the solution. Use `.isin()` to get data for specific months\n","  # Create X and Y train and test data\n","  # YOUR CODE HERE\n","  \n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ouQr3J6tQ8g8","colab_type":"code","colab":{}},"source":["# Fit model and use the model to make the prediction\n","# YOUR CODE HERE "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ofzNruAlRN83","colab_type":"code","colab":{}},"source":["# Create a new dataframe that combines the actual data and the predicted data\n","# YOUR CODE HERE"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5bFxAI8xRWnR","colab_type":"code","colab":{}},"source":["# Return predicted_vs_actual dataframe"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jKWdhUMDrcpR","colab_type":"text"},"source":["With the function in hand, find the day with the **highest average** difference between prediction and actual data. In this case, the difference between datas will be considered as an error since ideally, the prediction should match the actual data.\n","Type the date in your quiz in the format YYYY-MM-DD, e.g., 2020-06-22\n"]},{"cell_type":"code","metadata":{"id":"HSt-vdYk_Jje","colab_type":"code","colab":{}},"source":["# Call the function and plot the resulting predicted_vs_actual DataFrame\n","# YOUR CODE HERE\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7v4OVBWhKXRe","colab_type":"code","colab":{}},"source":["# Find the day that has the highest difference between the prediction and actual data\n","# YOUR CODE HERE \n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dU0mTf93l3zK","colab_type":"text"},"source":["## Exercise 05.2.3 - Data Binning and Classification - Advanced (Optional)\n","\n","[**Data Binning**](https://en.wikipedia.org/wiki/Data_binning) (also known as data bucketing) is the process of converting continuous data into categorical data to reduce the effect of insignificant values.\n","\n","In this exercise, we will bucket each **daily normalized energy consumption**, from the metered data file `Office_Autumn`, into 2 categories:\n","\n","Category id | Energy consumption range (normalized) | Bin (category)\n","--- | --- | ---\n","0 | 0.0 - 0.5 | low\n","1 | 0.5 - 1.0| high\n","\n","Such that the columns of your dataframe would be `TemperatureC` and `Humidity` (from the weather file `weather0`) and `energy consumption bucket`. Where `energy consumption bucket` is the target variable, either 0 or 1, calculated from the metered data file following the table above.\n","\n","Then, we will use the `RandomForestClassifier` algorithm to classify whether the current day (pair of values of `TemperatureC` and `Humidity`) is a `low` (`category_id` = 0) energy consumption day or a `high` (`category_id` = 1) energy consumption day.\n","\n","In order to correctly asses the performance of your model, you should report the following: `accuracy`, `precision`, `recall`, `f1-score`, and `support`.\n","\n","The files needed for this exercises are `weather0.csv` and `Office_Autumn.csv`\n","\n","**Hint**: Resample training data into Daily time interval : `.resample('D')`.\n"]},{"cell_type":"code","metadata":{"id":"vlSV6OvKPmJD","colab_type":"code","colab":{}},"source":["# Load the weather data file and meter data file and resample the data on daily basis.\n","# YOUR CODE HERE\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yVq3KkimxZKI","colab_type":"code","colab":{}},"source":["# Create the train and test split, then fit the RandomForestClassifier model\n","# YOUR CODE HERE\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XGhuG-szXuh9","colab_type":"code","colab":{}},"source":["# Report accuracy, precision, recall, f1-score and support\n","# YOUR CODE HERE\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MWpE0aLUujXC","colab_type":"text"},"source":["Evaluate your classification model for a day with temeperature of $8.5^o$C and $45.0$% humidity. \n","\n","Type below on whether this day is a `high` energy consumption day or a `low` energy consumption day.\n"]},{"cell_type":"code","metadata":{"id":"_UFUb5tO6x05","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}